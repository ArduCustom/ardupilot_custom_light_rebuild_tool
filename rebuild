#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require_relative 'lib/light_rebuilder'
require_relative 'lib/libutil/lib/term_color'

class XOptionParser < OptionParser

    def initialize
        super
        self.banner = "Usage: #$0 [options] [base_rev]"
        on('-n', '--dry-run', 'only show what commits would be used to rebuild the branch') { @dry_run = true }
        on('-a', '--abort', 'abort rebuild') { |value| @action = :abort }
        on('-d', '--debug') { @debug = true }
    end

    def print_usage
        STDERR.puts self
        exit 1
    end

    def set_defaults
        @action = :run
        @dry_run = false
        @degug = false
    end

    def validate!
        raise ArgumentError, 'too many arguments' if ARGV.count > 1
    end

    def parse!
        set_defaults
        super
        validate!
        @base_rev = ARGV[0]
        self
    rescue ArgumentError => error
        STDERR.puts "Error: #{error}\n\n"
        print_usage
    end

    %i[ debug ].each do |name|
        define_method "#{name}?" do
            instance_variable_get "@#{name}"
        end
    end

    attr_reader :base_rev, :action, :dry_run

end

begin

    TermColor.enable

    options = XOptionParser.new.parse!

    rebuilder = LightRebuilder.new

    case options.action
    when :abort
        rebuilder.abort
    when :run
        rebuilder.run options.base_rev, dry: options.dry_run
    else
        raise "invalid action: #{options.action}"
    end

rescue Interrupt
    STDERR.puts "User interrupt"
    exit 1

rescue => error

    if options.debug?
        raise
    else
        STDERR.puts unless [ ArgumentError, LightRebuilder::UncommitedChanges, LightRebuilder::NothingToDo, LightRebuilder::NotOnTheRightBranch, LightRebuilder::NotInReposRoot ].include? error.class
        STDERR.puts TermColor.red("error: #{error}")
        exit 2
    end

end
